from sys import path_hooks
from tkinter import image_types

from aiogram import Bot, Dispatcher, F, types, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from aiogram.enums.chat_action import ChatAction
from pathlib import Path
import asyncio

from telebot.types import CallbackQuery

import os
from dotenv import load_dotenv
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
BOT_USERNAME = os.getenv("BOT_USERNAME")
SHEET_LINK = os.getenv("SHEET_LINK")
DESIGN_LESSONS_LINK = os.getenv("DESIGN_LESSONS_LINK")
EDITING_LESSONS_LINK = os.getenv("EDITING_LESSONS_LINK")
MANAGER_USERNAME = os.getenv("MANAGER_USERNAME")
EMAIL = os.getenv("EMAIL")
PHONE_NUMBER = os.getenv("PHONE_NUMBER")
PORTFOLIO_LINK = os.getenv("PORTFOLIO_LINK")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

last_voice_ids = {}

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì –ü–æ—á–µ–º—É –º—ã?"), KeyboardButton(text="üñº –í–ò–¢–†–ò–ù–ê")],
        [KeyboardButton(text="ü§ñ REELS BOT"), KeyboardButton(text="üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")],
        [KeyboardButton(text="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"), KeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä")],
        [KeyboardButton(text="üëÄ –û –Ω–∞—Å"), KeyboardButton(text="üí≥ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑")]
    ],
    resize_keyboard=True
)

async def send_voice_message(chat_id: int, voice_file: FSInputFile, caption: str, buttons: list[list[InlineKeyboardButton]]) -> types.Message:
    await bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_VOICE)
    return await bot.send_voice(
        chat_id=chat_id,
        voice=voice_file,
        caption=caption,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode=ParseMode.HTML
    )

@router.message(CommandStart())
async def start_handler(message: Message):
    video_path = BASE_DIR / "media" / "studio_circle.mp4"
    video = FSInputFile(video_path)
    await message.bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_VIDEO_NOTE)
    await message.answer_video_note(video)

    image_path = BASE_DIR / "media" / "studio_card.jpg"
    image = FSInputFile(image_path)
    await message.answer_photo(
        photo=image,
        caption="üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–û–¢–ò–ö–û–í</b> ‚Äî –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—É–¥–∏—é –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—é.\n\n"
                "üß† –°–µ–π—á–∞—Å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–µ –¥–∏–∑–∞–π–Ω, –Ω–µ –≤–∏–¥–µ–æ, –Ω–µ –∑–≤—É–∫ ‚Äî –∞ –∏–¥–µ—è, –ø—Ä–µ–≤—Ä–∞—â—ë–Ω–Ω–∞—è –≤ —Ü–µ–ø–ª—è—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ú—ã —É–º–µ–µ–º –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ, —Ç–æ—á–Ω–æ –∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.\n\n"
                "<b>–í –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ:</b>\n"
                "üéû –ú–æ–Ω—Ç–∞–∂—ë—Ä—ã, —Å–æ–±–∏—Ä–∞—é—â–∏–µ –≤–∏–¥–µ–æ—Ä—è–¥ —Å –Ω–µ—Ä–≤–æ–º –∏ –∫–∞—á–æ–º\n"
                "üé® –î–∏–∑–∞–π–Ω–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥—è—Ç –≤–∏–∑—É–∞–ª, –∫–∞–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—ã\n"
                "üëæ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã, —á—Ç–æ –æ–∂–∏–≤–ª—è—é—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —á–∞—Ç-–±–æ—Ç–æ–≤\n"
                "üñç –ò–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –ø–µ—Ä–µ–¥–∞—é—â–∏–µ —Å–º—ã—Å–ª—ã —á–µ—Ä–µ–∑ —Ä–∏—Å—É–Ω–æ–∫\n"
                "üì± –ö–æ–Ω—Ç–µ–Ω—Ç-—Ä–µ–∂–∏—Å—Å—ë—Ä—ã, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–∏–µ —Ö–∞–æ—Å –≤ —Å–µ—Ä–∏–∞–ª\n\n"
                "üí• –ú—ã —Å—Ç—Ä–æ–∏–º –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–æ–ª–∏–∫–∏ –∏ –ø–æ—Å—Ç—ã. –ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –∑—Ä–∏—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–∞—Å—à–∞—Ä–∏–≤–∞—Ç—å –¥—Ä—É–∑—å—è–º.\n\n"
                "üì© –ü–∏—à–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –ø—Ä–æ —Ç–µ–±—è –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–∑–Ω–∞–ª–∏ ‚Äî –∞ —á—Ç–æ–±—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏."
    )

    user_status = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=message.from_user.id)

    if user_status.status in ["member", "administrator", "creator"]:
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", reply_markup=main_menu)
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton(text="üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
        ])
        await message.answer(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=kb
        )

@router.callback_query(F.data == "check_sub")
async def check_sub(query: types.CallbackQuery):
    user_status = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=query.from_user.id)

    if user_status.status in ["member", "administrator", "creator"]:
        await query.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
        await query.message.answer("–í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:", reply_markup=main_menu)
    else:
        await query.answer("‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)

@router.message(F.text == "‚ùì –ü–æ—á–µ–º—É –º—ã?")
async def why_us_handler(message: Message):
    voice_path = BASE_DIR / "media" / "why_us.ogg"
    if not voice_path.exists():
        await message.answer("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    voice = FSInputFile(voice_path)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–Ø –Ω–µ –≤–µ—Ä—é, —á—Ç–æ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç...", callback_data="no_believe")],
        [InlineKeyboardButton(text="–î–ª—è —á–µ–≥–æ –º–Ω–µ —ç—Ç–æ?", callback_data="why_me")],
        [InlineKeyboardButton(text="–í—ã –∏–Ω—Ñ–æ—Ü—ã–≥–∞–Ω–µ!", callback_data="info_business")],
        [InlineKeyboardButton(text="–Ø –≤—Å—ë –ø–æ–Ω—è–ª!", callback_data="understood")]
    ])

    sent = await send_voice_message(
        chat_id=message.chat.id,
        voice_file=voice,
        caption="üéô <b>–ß–µ–º –º—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è?</b>",
        buttons=kb.inline_keyboard
    )

    last_voice_ids[message.chat.id] = sent.message_id

@router.callback_query(F.data == "why_us")
async def why_us_link(callback: types.CallbackQuery):
    voice_path = BASE_DIR / "media" / "why_us.ogg"
    if not voice_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return
    voice = FSInputFile(voice_path)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–Ø –Ω–µ –≤–µ—Ä—é, —á—Ç–æ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç...", callback_data="no_believe")],
        [InlineKeyboardButton(text="–î–ª—è —á–µ–≥–æ –º–Ω–µ —ç—Ç–æ?", callback_data="why_me")],
        [InlineKeyboardButton(text="–í—ã –∏–Ω—Ñ–æ—Ü—ã–≥–∞–Ω–µ!", callback_data="info_business")],
        [InlineKeyboardButton(text="‚úÖ –Ø –≤—Å—ë –ø–æ–Ω—è–ª!", callback_data="understood")]
    ])
    chat_id = callback.message.chat.id
    try:
        await bot.delete_message(chat_id=chat_id, message_id=callback.message.message_id)
    except Exception:
        pass
    sent = await send_voice_message(
        chat_id=chat_id,
        voice_file=voice,
        caption="<b>–ß–µ–º –º—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è?</b>",
        buttons=kb.inline_keyboard
    )
    last_voice_ids[chat_id] = sent.message_id
    await callback.answer()


async def handle_voice_with_back(query: types.CallbackQuery, file_name: str, caption: str):
    chat_id = query.message.chat.id
    if chat_id in last_voice_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=last_voice_ids[chat_id])
        except:
            pass
    voice_path = BASE_DIR / "media" / file_name
    if not voice_path.exists():
        await query.message.answer("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    voice = FSInputFile(voice_path)
    back_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_why_us")]
    ])

    sent = await send_voice_message(
        chat_id=chat_id,
        voice_file=voice,
        caption=caption,
        buttons=back_button.inline_keyboard
    )

    last_voice_ids[chat_id] = sent.message_id
    await query.answer()

@router.callback_query(F.data == "no_believe")
async def no_believe_callback(query: types.CallbackQuery):
    await handle_voice_with_back(
        query=query,
        file_name="no_believe.ogg",
        caption="üòé –ù—É, —Å–∫–µ–ø—Å–∏—Å ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ú—ã –ø–æ–∫–∞–∂–µ–º –∫–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ–≤–æ—Ä—è—Ç —Å–∞–º–∏ –∑–∞ —Å–µ–±—è."
    )

@router.callback_query(F.data == "why_me")
async def why_me_callback(query: types.CallbackQuery):
    await handle_voice_with_back(
        query=query,
        file_name="why_me.ogg",
        caption="üöÄ –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ —Å–æ–∑–¥–∞—Ç–µ–ª—å. –ö–æ–Ω—Ç–µ–Ω—Ç ‚Äî —ç—Ç–æ —Å–∏–ª–∞, –∏ –º—ã –¥–∞—ë–º —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."
    )

@router.callback_query(F.data == "info_business")
async def info_business_callback(query: types.CallbackQuery):
    await handle_voice_with_back(
        query=query,
        file_name="info_business.ogg",
        caption="üëÜ –ü–æ–≥–æ–≤–æ—Ä–∏–º –æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è—Ö –≤ –∏–Ω—Ñ–æ—Ü—ã–≥–∞–Ω—Å—Ç–≤–µ"
    )

@router.callback_query(F.data == "understood")
async def understood_callback(query: types.CallbackQuery):
    try:
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    image_path = BASE_DIR / "media" / "thank_you.jpg"
    image = FSInputFile(image_path)
    menu_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫—Ä—É—á–µ!", callback_data="go_main_menu")]
    ])
    await query.message.answer_photo(
        photo=image,
        caption="üî• –ë—Ä–æ, —Ç—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫! –í–∞–∂–Ω–æ –ª–∏—à—å –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Å–≤–æ–∏ —Å—Ç—Ä–∞—Ö–∏ –∏ –ø–æ–ª–µ—Ç–µ—Ç—å –¥–∞–ª—å—à–µ!\n"
                "–î–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É!",
        reply_markup=menu_button
    )
    await query.answer()

@router.callback_query(F.data == "back_to_why_us")
async def back_to_why_us(query: types.CallbackQuery):
    try:
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await why_us_handler(query.message)
    await query.answer()

@router.callback_query(F.data == "go_main_menu")
async def go_main_menu_callback(query: types.CallbackQuery):
    await query.message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    await query.answer()

@router.message(F.text == "ü§ñ REELS BOT")
async def neuro_bot(message: Message):
    image_path = BASE_DIR / "media" / "bot_image.jpg"
    if not image_path.exists():
        await message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "ü§ñ <b>–ù–ï–ô–†–û–ö–û–¢</b> - —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–∞—Å—ë—Ç –≤—Å–µ—Ö —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n"
        "üì≤ –û–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –ª—é–±–æ–µ –≤–∏–¥–µ–æ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ä–æ–ª–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–≤–æ—ë–º –∫—Ä–µ–∞—Ç–∏–≤–µ!\n\n"
        "üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —É–≤–∏–¥–∏—à—å –µ—â—ë –∫–æ–µ-—á—Ç–æ –æ –Ω–∞—à–µ–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É", callback_data="get_access_to_bot")]
    ])
    await message.answer_photo(
        photo=image,
        caption=caption,
        reply_markup=kb
    )

@router.callback_query(F.data == "reels_bot")
async def neuro_bot_about_us(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "bot_image.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "ü§ñ <b>–ù–ï–ô–†–û–ö–û–¢</b> - —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–∞—Å—ë—Ç –≤—Å–µ—Ö —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n"
        "üì≤ –û–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –ª—é–±–æ–µ –≤–∏–¥–µ–æ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ä–æ–ª–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–≤–æ—ë–º –∫—Ä–µ–∞—Ç–∏–≤–µ!\n\n"
        "üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —É–≤–∏–¥–∏—à—å –µ—â—ë –∫–æ–µ-—á—Ç–æ –æ –Ω–∞—à–µ–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É", callback_data="get_access_to_bot")]
    ])
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image,
        caption=caption,
        reply_markup=kb
    )

@router.callback_query(F.data == "get_access_to_bot")
async def neuro_bot_access(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "bot_image_access.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "üñº –ï—Å–ª–∏ —Ç—ã –∫—Ä–µ–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç—ã –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –∫–ª—ë–≤—ã–º –±–æ—Ç–æ–º, —Ç–æ...\n\n"
        "–í–æ—Ç —Ç–µ–±–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –≤—ã—à–µ!\n"
        "üëá –ù–µ —Å–æ–º–Ω–µ–≤–∞–π—Å—è - –∑–∞—Ö–æ–¥–∏ –∏ –ø—Ä–æ–±—É–π –ø–æ –∫–Ω–æ–ø–∫–µ, —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–æ—Ç–∞!", url=f"https://t.me/{BOT_USERNAME[1:]}")]
    ])
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image,
        caption=caption,
        reply_markup=kb
    )

@router.message(F.text == "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã")
async def free_products(message: Message):
    image_path = BASE_DIR / "media" / "free_products.jpg"
    if not image_path.exists():
        await message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "üéÅ –ô–æ—É, —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã? –¢–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å REELS BOT", callback_data="reels_bot")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¢–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="productivity_sheet")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å 5 —É—Ä–æ–∫–æ–≤ –¥–∏–∑–∞–π–Ω–∞", callback_data="design_lessons")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å 5 —É—Ä–æ–∫–æ–≤ –ø–æ –º–æ–Ω—Ç–∞–∂—É", callback_data="editing_lessons")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –¥–∏–∑–∞–π–Ω—É", callback_data="design_consult")]
    ])
    await message.answer_photo(
        photo=image,
        caption=caption,
        reply_markup=kb
    )

@router.callback_query(F.data == "back_to_free_products")
async def back_to_free_products(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "free_products.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "üéÅ –ô–æ—É, —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã? –¢–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å REELS BOT", callback_data="reels_bot")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¢–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="productivity_sheet")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å 5 —É—Ä–æ–∫–æ–≤ –¥–∏–∑–∞–π–Ω–∞", callback_data="design_lessons")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å 5 —É—Ä–æ–∫–æ–≤ –ø–æ –º–æ–Ω—Ç–∞–∂—É", callback_data="editing_lessons")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –¥–∏–∑–∞–π–Ω—É", callback_data="design_consult")]
    ])
    await callback.message.edit_media(
        media=InputMediaPhoto(media=image, caption=caption),
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == "productivity_sheet")
async def productivity_sheet(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "sheet.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "üåê –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –¥–µ–ª–∞ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –≤ –ø–æ—Ä—è–¥–∫–µ, –∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ —Å—Ç—Ä–∞–¥–∞–ª–∞!\n\n"
        "üëá –ó–∞–±–∏—Ä–∞–π –µ—ë –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏ –ø–æ–ª—å–∑—É–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=f"{SHEET_LINK}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_free_products")]
    ])
    await callback.message.edit_media(
        media=InputMediaPhoto(media=image, caption=caption),
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == "design_lessons")
async def design_lessons(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "design_lessons.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "üìπ –•–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è –æ—Å–Ω–æ–≤–∞–º –¥–∏–∑–∞–π–Ω–∞ –∏ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –¥–ª–∏–Ω–Ω—ã–π –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏?\n\n"
        "üëá –ù–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫–∏", url=f"{DESIGN_LESSONS_LINK}")], # –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Å—ã–ª–∫—É —Å —É—Ä–æ–∫–∞–º–∏
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_free_products")]
    ])
    await callback.message.edit_media(
        media=InputMediaPhoto(media=image, caption=caption),
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == "editing_lessons")
async def editing_lessons(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "editing_lessons.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "üéû –•–æ—á–µ—à—å –º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∫–∞–∫ –±–æ–∂–µ–Ω—å–∫–∞ –∏ –±—ã—Ç—å –∫—Ä—É—á–µ, —á–µ–º —Å–∞–º—ã–µ –∫—Ä—É—Ç—ã–µ —Ç–∏–∫—Ç–æ–∫–µ—Ä—ã?\n\n"
        "üëá –ù–∞—à–∏ —É—Ä–æ–∫–∏ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –≤ —ç—Ç–æ–º, –∑–∞–≥–ª—è–¥—ã–≤–∞–π —Ç—É–¥–∞!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫–∏", url=f"{EDITING_LESSONS_LINK}")], # –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Å—ã–ª–∫—É —Å —É—Ä–æ–∫–∞–º–∏
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_free_products")]
    ])
    await callback.message.edit_media(
        media=InputMediaPhoto(media=image, caption=caption),
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == "design_consult")
async def design_consult(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "design_consult.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏ –Ω–∞–º–µ—Ç–∏—Ç—å —Å–µ–±–µ –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è?\n\n"
        "üëá –ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", url=f"https://t.me/{MANAGER_USERNAME[1:]}")], # –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_free_products")]
    ])
    await callback.message.edit_media(
        media=InputMediaPhoto(media=image, caption=caption),
        reply_markup=kb
    )
    await callback.answer()

@router.message(F.text == "üëÄ –û –Ω–∞—Å")
async def about_us(message: Message):
    image_path = BASE_DIR / "media" / "about_us.jpg"
    if not image_path.exists():
        await message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "üí¨ –î–∞–≤–∞–π –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ?", callback_data="who_are_we")],
        [InlineKeyboardButton(text="–ü–æ—á–µ–º—É –º—ã?", callback_data="why_us")],
        [InlineKeyboardButton(text="–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")],
        [InlineKeyboardButton(text="FAQ", callback_data="faq")]
    ])
    await message.answer_photo(
        photo=image,
        caption=caption,
        reply_markup=kb
    )

@router.callback_query(F.data == "who_are_we")
async def who_are_we(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "who_are_we.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "–ú—ã - –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—É–¥–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "1. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "2. –î–∏–∑–∞–π–Ω\n"
        "3. –ú–æ–Ω—Ç–∞–∂ —Ä–∏–ª—Å–æ–≤\n\n"
        "–î–∞ –∏ –≤–æ–æ–±—â–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –º—ã –Ω–∞–π–¥—ë–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç–µ!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê —á—Ç–æ –ø–æ —Ü–µ–Ω–Ω–∏–∫–∞–º?", callback_data="more_who_are_we_1")]
    ])
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image,
        caption=caption,
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == "more_who_are_we_1")
async def who_are_we(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "more_who_are_we.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "–†–µ—à–µ–Ω–∏–µ –º—ã –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –¥–ª—è –ª—é–±–æ–≥–æ –∫–∞—Ä–º–∞–Ω–∞, –≥–ª–∞–≤–Ω–æ–µ - –æ–±—Å—É–¥–∏—Ç—å —Å—Ä–æ–∫–∏, –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–æ–∫!\n"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞–∫–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç–∞–º?", callback_data="more_who_are_we_2")]
    ])
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image,
        caption=caption,
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == "more_who_are_we_2")
async def who_are_we(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "more_who_are_we_2.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "–ö –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –º—ã –ª—é–±–∏–º –≤—Å–µ—Ö –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ–±–∏–∂–∞–µ–º, –µ—Å–ª–∏ –±—ã –≤—ã –∑–Ω–∞–ª–∏, –∫–∞–∫ –º—ã –≤–∞—Å –ª—é–±–∏–º - –≤—ã –±—ã —Ä–∞—Å–ø–ª–∞–∫–∞–ª–∏—Å—å!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–π–¥—É –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑!", callback_data="go_main_menu")]
    ])
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image,
        caption=caption,
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == "portfolio")
async def portfolio(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "portfolio.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞—à–∏—Ö —Ä–µ–±—è—Ç? –ù—É, —Ç–∞–∫ –ø–æ–≥–Ω–∞–ª–∏! –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏ –∏ –ª—é–±—É–π—Å—è!"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!", url=f"{PORTFOLIO_LINK}")]
    ])
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image,
        caption=caption,
        reply_markup=kb
    )

@router.callback_query(F.data == "faq")
async def faq(callback: CallbackQuery):
    image_path = BASE_DIR / "media" / "faq.jpg"
    if not image_path.exists():
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    image = FSInputFile(image_path)
    caption = (
        "‚ùì –í–û–ü–†–û–°–´, –ö–û–¢–û–†–´–ï –ù–ê–ú –ß–ê–°–¢–û –ó–ê–î–ê–Æ–¢\n\n"
        "1Ô∏è‚É£ –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—É–¥–∏—è \"–ö–û–¢–ò–ö–û–í\"?\n"
        "–ú—ã —Å–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: –≤–∏–¥–µ–æ, –¥–∏–∑–∞–π–Ω, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—é.\n\n"
        "2Ô∏è‚É£ –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?\n"
        "–ú–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω, –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ ‚Äî –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞.\n\n"
        "3Ô∏è‚É£ –ú–æ–≥—É –ª–∏ —è –∑–∞–∫–∞–∑–∞—Ç—å —É –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —É—Å–ª—É–≥—É?\n"
        "–ö–æ–Ω–µ—á–Ω–æ! –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º ‚Äî –º—ã –≥–∏–±–∫–æ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º—Å—è –ø–æ–¥ –∑–∞–¥–∞—á–∏.\n\n"
        "4Ô∏è‚É£ –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã?\n"
        "–°—Ä–æ–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ–±—ä—ë–º–∞, –Ω–æ –º—ã –≤—Å–µ–≥–¥–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ –≤–∞—à –¥–µ–¥–ª–∞–π–Ω –∏ —Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ.\n\n"
        "5Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–µ–∫—Ç?\n"
        "–¶–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä—ë–º–∞ —Ä–∞–±–æ—Ç—ã. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç 1000 —Ä—É–±–ª–µ–π.\n\n"
        "6Ô∏è‚É£ –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ?\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –ö–æ—Ç–∏–∫–æ–≤–∞ –º–ª–∞–¥—à–µ–≥–æ ‚Äî –º—ã –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏–º –∏ –ø–æ–º–æ–∂–µ–º —Å –±—Ä–∏—Ñ–æ–º.\n\n"
        "7Ô∏è‚É£ –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª –≤—ã–±–æ—Ä–∞ \"–£—Å–ª—É–≥ –∏ —Ç–∞—Ä–∏—Ñ–æ–≤\" –æ—Ç —Ä–∞–∑–¥–µ–ª–∞ \"–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\"?\n"
        "–í —Ä–∞–∑–¥–µ–ª–µ \"–£—Å–ª—É–≥–∏ –∏ —Ç–∞—Ä–∏—Ñ—ã\" –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –±—ã—Å—Ç—Ä—ã–µ –∏ –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∞ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\" –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ —Å–≤–æ–µ–º—É –±—Ä–∏—Ñ—É, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –∂–µ–ª–∞–Ω–∏—è–º.\n\n"
        "8Ô∏è‚É£ –ú—è—É–∫–∞–µ—Ç–µ?\n"
        "–î–∞, –º—è—É–∫–∞–Ω—å–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ—Ç 1000 —Ä.\n\n"
        "üí¨ –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –ø—Ä—è–º–æ —Å—é–¥–∞ –∏–ª–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"
    )
    caption_2 = (
        f"–ü–æ—á—Ç–∞: {EMAIL}\n"
        f"–ê–∫–∫–∞—É–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {MANAGER_USERNAME}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {PHONE_NUMBER}"
    )
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=image
    )
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=caption
    )
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=caption_2
    )

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
